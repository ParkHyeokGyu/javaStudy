/*
 	1. 객체지향 프로그램
 		1) 데이터 보호 : 캡슐화
 			=> 데이터를 은닉화 => 메소드를 톨해서 접근
 			   ----------	 --------------
 			   	private			getter/setter(읽기/쓰기)
 		2) 재사용 기법
 			=> 반복 제거
 			=> 상속(is-a)/포함(has-a) => 클래스 크기 비교
 			=> 이미 사용중에 있다(신뢰성이 뛰어나다)
 			=> 재사용(상속,포함),가독성(메소드),견고성(예외처리)
 		3) 자바의 상속(194page)
 			=> 재사용을 목적으로 한다(기존에 만들어진 클래스를 확장해서 사용)
 			   ---------- 상속(재사용,기능 변경해서 사용)
 			  				-------------------
 			  					| 라이브러리를 상속해서 처리
 			=> 필요시에는 변경해서 사용/있는 그대로 사용
 			   ----------------  -----------
 			   	| 상속				| 포함
 			=> 반복 코딩을 제거할 수 있다
 			예)
 				윈도우 => 변경/있는 그대로
 				public class Login extends JFrame
 								   ------- 상속
 				public class Login{
 					JFrame fr=new JFrame(); // 포함 클래스
 				}
 			=> 상속 특징
 				= 한개만 상속이 가능하다(단일 상속)
 				= 형식
 					A extends B => B클래스가 가지고 있는 모든것을 가지고 온다
 					-		  -	   멤버변수,공유변수,메소드,생성자,초기화블록
 					하위		  상위  ------	   -----
 								   => 상속의 예외 조건
 								   	1) 생성자
 								   	2) 초기화 블록
 								   	3) static => 상속이 아니라 공유할 수 있다
 								   	4) 멤버변수 => 상속은 되지만 접근이 불가능 : private
 								   => 필요한 기능만 설정한다
 								      멤버변수를 사용하려면 => private 대신 protected
 								   => 메소드의 기능을 변경해서 사용 : 오버라이딩
 				=> 속도(최적화) : 가급적이면 상속해서 사용하지 않는다
 						class A
 						class B extends A
 								   		
 						B b=new B(); => A할당 => B할당
 								   		
 						=> 스프링에서는 상속 개념이 거의 없다(일반 클래스로 사용하여 처리)
 								   					-------- POJO
 				=> 자바의 모든 클래스
 						-------
 						| 라이브러리/사용자 정의 클래스 => Object클래스로부터 상속을 받는다
 						| 
 					
 					상속 내리는 클래스 : 슈퍼 클래스,상위 클래스,베이스 클래스,부모 클래스
 					상속 받는 클래스 : 서브 클래스,하위 클래스,파생 클래스,자식 클래스
 			
 			상속 : 기존에 만들어진 클래스를 확장해서 새로운 클래스를 만들어 사용
 								   --- extends
 			예)
 				class 게시판{
 					글쓰기
 					목록출력
 					상세보기
 					수정
 					삭제
 					검색
 				}
 				// 확장
 				class 갤러리게시판 extends 게시판{
 					글쓰기 => 변경 => 이미지 업로드
 					목록출력 => 변경 => 이미지 출력
 					상세보기
 					수정
 					삭제
 					검색
 				}
 				class 답변형게시판 extends 게시판{
 					글쓰기
 					목록출력
 					상세보기
 					수정
 					삭제
 					검색
 					답변 => 추가
 				}
 				
 				지니뮤직 => 상속 => 멜론
 				CGV => 상속 => 롯데시네마/메가박스
 			
 			상속을 받는 경우 => 변경/다른 기능 추가
 						   --------------
 						   | 오버라이딩 | 오버로딩 => 다형셩
 			*** 객체지향의 3대 특성
 				캡슐화/상속,포함/오버라이딩,오버로딩
 				필수는 아니지만 권장사항이다 => 캡슐화는 필수
 				클래스 상속보다는 인터페이스 상속을 사용한다
 			
 			동물
 			 |
 			인간
 			class 동물
 			class 인간 extends 동물
 			----- 데이터형(사용자 정의)
 					| 인간,동물 데이터형도 포함
 			형식)
 				동물 a=new 인간();
 				인간 b=new 인간();
 				
 			*** 상속
 				서로 다른 클래스 여러개를 모아서 관리
 				--------------------------
 				 | 프로그램
 				   -----
 				    | 통합
 				      int a,b~z => 26
 				      int[] alpha
 				      => 한개의 이름을 제어
 				      => 다른 데이터형 => 클래스
 				      => 메소드(명령문)
 				      => 클래스를 동시에 모아 관리 => 상속
 */
package com.sist.main;
class Super{
	int a,b;
	void display() {}
}
class Sub extends Super{
//	int a,b;
//	void display() {}
	public void aaa() {
		System.out.println("a="+a);
		System.out.println("b="+b);
		display();
	}
}
public class MainClass {
	public static void main(String[] args) {
		
	}
}
