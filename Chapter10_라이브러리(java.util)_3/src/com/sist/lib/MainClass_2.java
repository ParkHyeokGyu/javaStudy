/*
 	335page => 자바의 컬렉션
 	           --------- 자료구조(데이터 관리)
 	           => 데이터를 모아서 관리하는 클래스의 집합
 	              -------------- CRUD
 	              추가,수정,삭제,읽기
 	              => 메모리에서 제어 => 영구적으로 저장을 할 수 없다
 	              => 영구적인 저장 장치가 필요 : 파일/오라클
 	              
 	Collection => 인터페이스
 		|
 	-----------------
 	|		|		|
 	List	Set		Map => 인터페이스 구현(표준화)
 	
 	List : 순서를 가지고 있다(인덱스) => 배열을 보완(고정적,같은 데이터형만 저장)
 	       데이터의 중복을 허용한다      가변형(저장 크기를 지정하지 않는다),Object를 사용하기에 모든 데이터형을 저장할 수 있다
 	       => *ArrayList : Vector를 보완 => 비동기 => 데이터베이스 연동
 	           장점
 	             배열형식으로 만들어져있다 => 인덱스를 이용하여 처리,접근 속도가 빠르다
 	           단점
 	             중각에 추가나 삭제시 속도가 떨어진다
 	             
 	           항상 인덱스 번호는 순차적으로 유지한다
 	           	0	1	2	3	4	5
 	            => 3삭제
 	            0	1	2	3	4
 	            => 3추가
 	            0	1	2	3	4	5
 	            => 자동으로 후위의 인덱스 번호가 바뀐다(속도저하)
 	            
 	            사용
 	              데이터의 양이 일관적이고 추가나 삭제가 없는 경우에 주로 사용
 	              => 데이터베이스에서 데이터를 제어한다면 직접 제어할 필요는 없다
 	              데이터의 접속속도를 중요시할 때(웹)
 	              
 	            --------------
 	            10	20	30	40
 	            --------------
 	            0	1	2	3
 	            
 	            --   --   --   --
 	            10 - 20 - 30 - 40
 	            --   --   --   --
 	            => LinkedList
 	            
 	            주요 메소드 => 웹의 핵심(공유)
 	            1)추가
 	              add(데이터)
 	              add(int index,데이터) => 특정 위치에 데이터를 추가 => 속도저하,가급적이면 데이터만 추가
 	            2)수정
 	              set(int index,데이터)
 	            3)삭제
 	              remove(int index)
 	            4)읽기
 	              get(int index)
 	            5)저장 갯수
 	              size()
 	            6)전체 지우기
 	              clear()
 	              
 	            
 	       => Vector : 동기 => 네드워크에서 접속자 정보 저장
 	       => LinkedList : C언어 개발자 => 호환
 	       
 	       ---------------------------------------------------------------
 	       컬렉션			읽기(접근시간)		추가/삭제			비고
 	       ---------------------------------------------------------------
 	       ArrayList	속도가 빠르다		느리다	순차적으로 추가나 삭제시에는 빠르다
 	       										비효율적인 메모리 사용
		   => 웹 자체에서는 추가나 삭제를 하지 않는다(오라클 이용)
			  오라클로부터 데이터를 받아 브라우저로 전송하는 역할뿐 직접적으로 제어하지 않는다
 	       ---------------------------------------------------------------
 	       LinkedList	속도가 느리다		빠르다	데이터가 많아질수록 접근성이 떨어진다
 	       ---------------------------------------------------------------
 	       
 	Set : 순서가 없다
 	      데이터의 중복을 허용하지 않는다
 	      => *HashSet : 중복데이터를 만들때
 	      => TreeSet : 검색 최적화
 	      
 	Map : 순서가 없다
 	      데이터의 중복을 허용한다
 	      key,value => 쌍으로 만들어진다
 	      --- key값은 중복할 수 없다
 	      => *HashMap : HashTable의 단점을 보완
 	                    웹에서 가장 많이 사용
 	                    1)관련된 클래스들 관리 => 스프링,마이바티스
 	                    2)웹소켓(웹 네트워크) => sessionId
 	      => HashTable
 	
 	Collection => 데이터를 일정 공간에 모아서 관리할 목적
 	           => 웹에서 목록 출력(데이터를 모아서 브라우저로 전송)
 		1)배열의 단점을 보완(저장 크기를 결정) => 고정적
 		  => 크기 결정을 하지 않는다(가변형)
 		2)인터페이스를 구현한다
 		  => 표준화(모든 개발자가 동일한 메소드를 이용)
 		  => 프레임워크 : Spring/MyBatis/JQuery/VueJS/ReactJS
 		     일정 기본 틀이 만들어져 있어 쉽게 다른 개발자의 코딩을 분석할 수 있다
 		     --------- 유지보수
 		
 */
package com.sist.lib;
import java.util.*;
public class MainClass_2 {
	public static void main(String[] args) {
		ArrayList list=new ArrayList();
		// 가급적이면 같은 데이터형을 저장하는것이 좋다
		// 추가
		list.add("홍길동"); // 0
		list.add("심청이"); // 1
		list.add("이순신"); // 2
		list.add("강감찬"); // 3
		list.add("춘향이"); // 4
		
		// 출력
		for(int i=0;i<list.size();i++) {
			Object name=list.get(i); // 데이터 읽기
			System.out.println(i+"."+name);
		}
		System.out.println("==========================");
		
		// 추가
		list.add(2,"을지문덕");
		// 출력
		for(int i=0;i<list.size();i++) {
			Object name=list.get(i); // 데이터 읽기
			System.out.println(i+"."+name);
		}
		System.out.println("==========================");
		
		// 삭제
		list.remove(3);
		// 출력
		for(int i=0;i<list.size();i++) {
			Object name=list.get(i); // 데이터 읽기
			System.out.println(i+"."+name);
		}
		System.out.println("==========================");
		
		// 수정
		list.set(2, "박문수");
		// 출력
		for(int i=0;i<list.size();i++) {
			Object name=list.get(i); // 데이터 읽기
			System.out.println(i+"."+name);
		}
		System.out.println("==========================");
		System.out.println("현재 인원:"+list.size());
		System.out.println("==========================");
		
		//전체 삭제
		list.clear();
		System.out.println("현재 인원:"+list.size());
		
		/*
		 	add() => 데이터 추가
		 	size() => 저장된 갯수
		 	get() => 데이터 읽기
		 	remove() => 데이터 삭제
		 	set() => 데이터 수정
		 	clear() => 데이터 전체 삭제
		 */
	}
}
