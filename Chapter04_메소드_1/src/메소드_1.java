/*
 		데이터 저장 ==========> 데이터 가공(처리) ==========> 가공된 데이터 출력
 			|					|						사용자 요청
 			|				사용자 요청 처리 => 로그인,검색결과
 			|					|
 			|				1) 연산자
 			|				2) 제어문
 			|				-------- 묶어서 사용
 			|				-------- 명령문의 집합 : 메소드
 			|				-------- 기능별 처리
 		데이터 한개 저장 : 변수(지역변수,전역변수 => 공유변수,객체변수)
 								------ 클래스
 		데이터를 묶어서 사용 : 같은 데이터형을 묶어서 관리
 		-------------- 변수명을 통일(인덱스) => 배열
 		-------------- 다른 데이터형을 묶어서 관리 => 클래스
 		
 		메소드(Method) => 클래스의 구성 요소
 							|
 						생성자,변수,메소드
 						
 		1) 사용 목적 => 1. 가독성,2. 재사용성,3. 속도(최적화)
 			분석(가독성) => 수정(유지보수),오류처리
 				기능별 분리(로그인처리,회원가입,목록출력,페이징...)
 			다른 클래스와 연결
 				객체지향 프로그램은 여러개의 클래스를 만들어서 연관관계
 				=> Scanner... (사용자정의)
 				   scan.nextInt()
 				   		--------- 입력된 정수 읽기
 				   System.out.println() => 화면에 출력
 				   trim(),length()
 				   => 메소드는 한가지 기능만 수행하게 만든다
 				      1) 입력
 				      2) 요청 처리 => 기능에 따라 세분화(여러개의 메소드 제작)
 				      3) 출력
 			반복 수행을 제거
 				오라클 연결
 					목록 출력
 						오라클 연결 ---
 						데이터 처리   | => 메소드화
 						오라클 닫기 ---
 					데이저 저장
 						...
 					데이터 수정
 						...
 					데이터 삭제
 						...
 					상세보기
 						...
 			재사용성이 높다
 			구조적인 프로그램 작성 => 단락을 나눠서 작업
 		2) 메소드 형식
 			[접근지정어]    [옵션] 리턴형 메소드명(매개변수...) : 선언부
 			 public(공개) static : new를 사용하지 않고 자동으로 메소드에 저장
 			 private	 abstract : 선언 => 추상클래스/인터페이스(설계)
 			 						=> 요구사항 분석
 			 default     final : 상속이 불가능(수정이 불가능)
 			 					 => Math,String,System...
 			 protected
 			{
 				구현부
 			}
 			
 			리턴형 : 사용자 요청에 대한 처리 결과값
 			매개변수 : 사용자의 요청값
 					예) 로그인 요청
 					   -------- id,pwd
 					   아이디 찾기
 					   -------- id
 					   검색
 					   -------- 검색어
 					   String substring(int start,int end)
 					   ------           -----------------
 					   리턴형				매개변수
 					 => 일반 : 3개 이상이면 묶어서 매개변수로 설정
 					 		 ------- 배열,클래스
 			메소드명 : 식별자(변수)
 					= 앞파벳이나 한글로 시작한다
 					= 메소드명의 길이 제한은 없다
 		3) 메소드 제작시 고민
 		4) 메소드 활용
 		5) 메소드 응용
 */
public class 메소드_1 {
	public static void main(String[] args) {
		
	}
}
