/*
 *	실행 순서
 *		자바 파일명과 클래스명 동일(대소문자 구분)
 *
 *				컴퓨터가 인식하는 언어
 *				javac(컴파일) => 0,1		java(인터프리터)
 *		A.java =============> A.class =============> 실행
 *		ㅡㅡㅡㅡㅡ				  바이너리 코드
 *		   ㅣ				  모든 운영체제에 호환
 *		원시소스(프로그래머)
 *
 *	소스 코딩의 주의점
 *		대소문자 구분
 *		명령문 => ;
 *		주석 처리
 *		들여쓰기
 *
 *	자바 개발자 약속
 *		변수/클래스/메소드/상수/인터페이스
 *			변수 : 소문자로 시작, 뒤에 오는 단어의 첫자는 대문자(fileName,file_name)
 *			상수 : 모든 앞파벳 대문자(MAX,MIN)
 *			클래스,인터페이스 : 첫자는 대문자(MainClass)
 *			메소드는 변수와 동일
 *
 *	*** 프로그램(데이터 관리)
 *			데이터 저장
 *				메모리에 저장 => 프로그램 종료와 동시에 사라진다
 *					한개의 데이터 관리 => 변수(기본형으로 메모리 크기가 결정되어있다)
 *						정수
 *							byte(1byte)/int(4byte)/long(8byte)
 *						문자
 *							char(2byte)
 *						실수
 *							float(4byte)/double(8byte)
 *						논리
 *							boolean(1byte)
 *					여러개의 데이터 관리 => 배열,클래스(사용자가 임의로 크기를 결정)
 *				ㅡㅡㅡㅡㅡㅡㅡㅡ
 *				파일에 저장
 *				RDBMS(오라클)
 *				ㅡㅡㅡㅡㅡㅡㅡㅡ 영구적인 저장 장치
 *	변수/연산자/제어문/데이터 모아서 관리/재사용/예외처리 => 라이브러리를 이용한 조립식
 *	응용 : 네트워크,파일
 *	ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
 *	오라클(21c) : CURD(추가,수정,삭제,검색)
 *	ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 필수
 *	브라우저 연동 : HTML5/CSS3/JavaScript
 *						   ㅡㅡㅡㅡㅡㅡㅡ Jquery(Ajax)
 *						   ㅡㅡㅡㅡㅡㅡㅡ VueJs(Vuex)
 *						   ㅡㅡㅡㅡㅡㅡㅡ ReactJs(Redux)
 *						   옵션 ㅡㅡㅡㅡ TypeScript/NodeJs(실시간상담)
 *	JSP => Back-end + Front-end
 *	ㅡㅡㅡ MVC(SpringMVC => 직접 Spring 제작)
 *	DataBase 연동 => MyBatis/JPA
 *	Spring
 *	Spring-Boot : ThymeLeaf
 *	AWS => PaaS => EC2
 *	ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
 *	Python : 데이터분석,시각화
 *			 Pandas/Numpy/MatplotLab
 *			 옵션 : 머신러닝/딥러닝
 *
 *	변수 : 메모리에 한개의 데이터를 저장하는 공간의 별칭
 *		변수명 설정
 *		1. 앞파벳 시작(대소문자 구분),한글
 *		2. 숫자 사용 가능(첫자에 사용 불가)
 *		3. 키워드 사용 금지
 *		4. 공백 불가
 *		5. 특수문자 사용 가능(_,$)
 *
 *		선언 방식
 *			데이터형 변수명;
 *		초기화
 *			변수명=값;
 *		활용
 *			변수명=값;(수정)
 *		종류 => 지역변수 => {}벗어나면 삭제
 *
 *	데이터 저장 => 가공 => 출력
 *				ㅣ
 *			   연산자
 *			   제어문
 *			  ㅡㅡㅡㅡ 메소드
 *
 *	산술연산자
 *	+,-,*,/,%
 *	1. 연산은 같은 데이터형끼리만 연산된다
 *		10.5+10 => 20.5 (double+int=double)
 *								int형을 double형으로 변환(자동형변환)
 *		'A'+1 => 66(char+int=int)
 *					char형을 int형으로 변환(char < int)
 *		10.5+(double)10 => 내부적으로 변환하지 않고 바로 연산
 *			 int형을 double형으로 강제형변환
 *
 *		크기
 *		byte < char < int < long < float < double
 *		* int형 이하의 데이터형 연산 결과값은 int형이다
 *			char+char=int, byte+byte=int
 *
 *	2.
 *		+ : 산술처리,문자열겹합
 *		예)
 *			7+"7"+7="777"
 *			"77"+7="777"
 *			7+7+"7"="147"
 *			7+"7"+7-5 => "777"-5(X)
 *			7+"7"+7*2 => 7+"7"+14
 *		
 *		산술 => 왼쪽에서 오른쪽으로 연산
 *			   *,/,%은 +,-보다 우선순위
 *			   () => 최우선순위
 *
 *		/ : 정수/정수=정수
 *				10/3=3, 5/2=2(정수는 소수점 이하 제거)
 *			0으로 나눌 수 없다
 *
 *		% : 나눈 후 나머지 값
 *			부호는 왼쪽 피연산자의 부호를 가진다
 *				- % + => -
 *				- % - => -
 *				+ % - => +
 *				+ % + => +
 */

// 3개의 정수를 받는다(1~100) => 총합,평균
public class 산술연산자 {

	public static void main(String[] args) {
//		{
//			int a=10;
//		} // 해당 블록을 벗어나면 a변수는 삭제된다
//		int a=10; // 해당 변수와 위 블록의 변수는 다른 변수이다
//		System.out.println(a);
		
		int a=(int)(Math.random()*100)+1; // Math.random() => 0.0~0.99
		int b=(int)(Math.random()*100)+1;
		int c=(int)(Math.random()*100)+1;
		int tot=a+b+c;
		double avg=tot/3.0;
		System.out.println("a:"+a+",b:"+b+",c:"+c+",tot:"+tot+",avg:"+avg);
		System.out.printf("avg:%.2f\n",avg);
		/*
		 *	실수 : %f %.2f %.3f
		 *	정수 : %d
		 *	문자 : %c
		 *	문자열 : %s
		 */
		System.out.println("===================");
		System.out.print("aaa");
		System.out.print("bbb");
	}

}
